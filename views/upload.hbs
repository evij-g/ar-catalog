<section class="section content">
    <h2 class="title">
        ADD NEW ELEMENT TO CATALOG
    </h2>
    <form
        action="/create"
        method="POST"
        class="upload"
        enctype="multipart/form-data">

        <div class="card">
            <div class="card-image">
                <figure class="image is-4by3" id="img-preview">
                    <img src="">
                    
                </figure>
                <figure>
                    <img src="{{markerElement.markerLink}}?raw=true" id="markerImage" />
                    <canvas id="canvas"></canvas>
                    
                </figure>

            </div>

            <div class="card-content">
                <div class="media">
                    <div class="media-content">
                        <div class="field">
                            <div class="file has-name is-fullwidth">
                                <label class="file-label">
                                    <input class="file-input" type="file" name="image">
                                    <input class="file-input" type="file" name="markerPattern">
                                    <span class="file-cta">
                                        <span class="file-icon">
                                            <i class="fas fa-upload"></i>
                                        </span>
                                        <span class="file-label">
                                            select fileâ€¦
                                        </span>
                                    </span>
                                    <span class="file-name"></span>
                                </label>
                            </div>
                        </div>

                        <div class="field">
                            <input
                                class="input"
                                type="text"
                                name="title"
                                placeholder="title"
                                id="element-title"
                                required="required"/>
                        </div>
                        <div class="field">
                            <input
                                class="input"
                                type="number"
                                name="width"
                                placeholder="real world width"
                                id="element-width"
                                required="required"/>
                        </div>
                        <div class="field">
                            <input
                                class="input"
                                type="number"
                                name="height"
                                placeholder="real world height"
                                id="element-height"
                                required="required"/>
                        </div>
                        <div class="field">
                            <input
                                class="input"
                                placeholder="material"
                                type="text"
                                name="material"
                                id="element-material"/>
                        </div>

                        <div class="control">
                            <button class="button is-primary" type="submit">upload</button>
                        </div>

                        <div class="control">
                            <button class="button is-primary" type="button" onclick="createMarkerPattern()">create marker</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </form>

    {{#each allElements}}
        {{element}}
    {{/each}}

</section>

<script>
    const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');

const image = new Image(); // Using optional size for image
image.onload = drawImageActualSize; // Draw when image has loaded

// Load an image of intrinsic size 300x227 in CSS pixels
image.src = document.getElementById('markerImage').src();
console.log(image.src);

function drawImageActualSize() {
  // Use the intrinsic size of image in CSS pixels for the canvas element
  canvas.width = this.naturalWidth;
  canvas.height = this.naturalHeight;

  // Will draw the image as 300x227, ignoring the custom size of 60x45
  // given in the constructor
  ctx.drawImage(this, 0, 0);

  // To use the custom size we'll have to specify the scale parameters
  // using the element's width and height properties - lets draw one
  // on top in the corner:
  ctx.drawImage(this, 0, 0, this.width, this.height);
}

</script>
<script>

 console.log("------------------createMarkerPattern--------------");
   // ARjsStudioBackend = import ("../public/scripts/arjs-studio-backend.min.js");
    const {MarkerModule, MATRIX_3X3_HAMMING_63} = ARjsStudioBackend;
    //const MarkerModule;
    //const MATRIX_4x4_BCH_13_9_3;
    /* // generate an SVG data URI for the value '7'
const barcodeMarkerSVG =
* MarkerModule.getBarcodeMarkerSVGDataURI(MATRIX_3X3_HAMMING_63, 7);

const
* barcodeImage = new Image();
barcodeImage.src = barcodeMarkerSVG; // use the
* image 'load' event to know when image is ready
*/
    // ----

    // draw the image on an off-screen canvas and use `.toDataURL()` to get a data
    // URI
    console.log("getMarker: " + getMarker());
    const markerElement = getMarker();
    console.log(markerElement);
    const imageDataURI = markerElement
        .markerlink
        .toDataURL();
    console.log(imageDataURI);

    const fullMarker = await MarkerModule.getFullMarkerImage(
        imageDataURI,
        1.0,
        100,
        'black'
    );
    const pattFile = await MarkerModule.getMarkerPattern(imageDataURI);

    const patternImage = new Image();
    patternImage.src = fullMarker;
    // use the image 'load' event to know when image is ready
    patternImage.addEventListener('load', () => {

        document.body.appendChild(patternImage);

    })
    /* die "marker.patt"-Datei sollte generiert werden und dann zu cloudinary
* hochgeladen werden.
Der Link zur Datei wird dem Marker in der Datenbank
* zugeordnet.

pattFileDownload.href =
* `data:text/plain;charset=utf-8,${pattFile}`;
pattFileDownload.download =
* 'marker.patt'; // filename
*/
    const pattFileDownload = document.createElement('a');
    pattFileDownload.href = `data:text/plain;charset=utf-8,${pattFile}`;
    pattFileDownload.download = 'marker.patt'; // filename
    pattFileDownload.click(); // trigger download

    console.log("------------------createMarkerPattern--------------");
    
    </script>


<script>
    const fileInput = document.querySelector('.file input[type=file]');
    //const chooseFile = document.getElementById("choose-file");
    const imgPreview = document.getElementById("img-preview");
    console.log(fileInput);
    fileInput.onchange = () => {
        if (fileInput.files.length > 0) {
            getImgData();
            const fileName = document.querySelector('.file .file-name');
            fileName.textContent = fileInput
                .files[0]
                .name;
        }
    }

    function getImgData() {
        const files = fileInput.files[0];
        if (files) {
            const fileReader = new FileReader();
            fileReader.readAsDataURL(files);
            fileReader.addEventListener("load", function () {
                imgPreview.style.display = "block";
                imgPreview.innerHTML = '<img src="' + this.result + '" />';
            });
        }
    }
</script>

<script src="/scripts/arjs-studio-backend.min.js"></script>