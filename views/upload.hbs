<section class="section content">
    <h2 class="title">
        upload new element to catalog
   </h2>
    
    <form
        action="/create"
        method="POST"
        class="upload"
        enctype="multipart/form-data">

        <div class="card">
            <div class="card-image">
                <figure class="image" id="img-preview">
                    <img src="">

                </figure>
                
            </div>

            <div class="card-content">
                <div class="media">
                    <div class="media-content">
                        <div class="field">
                            <div class="file has-name is-fullwidth">
                                <label class="file-label">
                                    <!-- <input class="file-input" type="file" name="file"> -->
                                    <input name="imageUrl" type="file" class="file-input cloudinary-fileupload"/>
                                    <span class="file-cta">
                                        <span class="file-icon">
                                            <i class="fas fa-upload"></i>
                                        </span>
                                        <span class="file-label">
                                            select fileâ€¦
                                        </span>
                                    </span>
                                    <span class="file-name"></span>
                                </label>
                            </div>
                        </div>
                        

                        <div class="field">
                            <label for="title" class="label">Title:</label> 
                            <input
                                class="input"
                                type="text"
                                name="title"
                                placeholder="title"
                                id="element-title"
                                required="required"/>
                        </div>
                        <div class="field">
                            <label for="width" class="label">Width in CM:</label> 
                            <input
                                class="input"
                                type="number"
                                name="width"
                                placeholder="real world width"
                                id="element-width"
                                required="required"/>
                        </div>
                        <div class="field">
                            <label for="height" class="label">Height in CM:</label> 
                            <input
                                class="input"
                                type="number"
                                name="height"
                                placeholder="real world height"
                                id="element-height"
                                required="required"/>
                        </div>
                        <div class="field">
                            <label for="position" class="label">Position (x y z)</label> 
                            <input
                                class="input"
                                type="text"
                                name="position"
                                placeholder="0 0 0"
                                id="element-position"
                                />
                        </div>
                        <div class="field">
                            <label for="rotation" class="label">Rotation (x y z)</label> 
                            <input
                                class="input"
                                type="text"
                                name="rotation"
                                placeholder="-90 0 0"
                                id="element-rotation"
                               />
                        </div>
                        <div class="field">
                            <label for="scale" class="label">Scale (x y z)</label> 
                            <input
                                class="input"
                                type="text"
                                name="scale"
                                placeholder="1 1 1"
                                id="element-scale"
                                />
                        </div>
                        <div class="field">
                            <label for="markerSize" class="label">AR-Marker width in cm</label> 
                            <input
                                class="input"
                                type="text"
                                name="markerSize"
                                placeholder="17"
                                value='17'
                                id="element-markerSize"
                                />
                        </div>
                        <div class="field">
                            <label for="material" class="label">Material:</label> 
                            <input
                                class="input"
                                placeholder="material"
                                type="text"
                                name="material"
                                id="element-material"/>
                        </div>

                        <!-- <div class="field">
                            <input
                                class="input"
                                placeholder="material"
                                type="text"
                                name="markerPatternBase64"
                                id="markerPatternBase64"/>
                        </div> -->
                        <div class="field">
                            <!-- <div class="control">
                                <a href="" id="markerPatternFile">create marker</a>
                            </div> -->
                            <label class="label">AR MARKER</label> 
                            <figure>
                                <!-- <image id="markerImage"> -->
                                <!-- <svg  src="{{markerElement.markerLink}}">   </svg> -->
                                
                                <img id="markerImage" src="{{markerElement.markerLink}}" crossOrigin="anonymous" />
                               <!--  </image> -->
                            </figure>

                            <div class="control">
                                <button class="button is-primary" type="submit">upload</button>
                            </div>
                            

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </form>

    {{#each allElements}}
        {{element}}
    {{/each}}

</section>



<script>
    const fileInput = document.querySelector('.file input[type=file]');
    //const chooseFile = document.getElementById("choose-file");
    const imgPreview = document.getElementById("img-preview");
    //console.log(fileInput);
    fileInput.onchange = () => {
        if (fileInput.files.length > 0) {
            getImgData();
            const fileName = document.querySelector('.file .file-name');
            fileName.textContent = fileInput
                .files[0]
                .name;
        }
    }

    function getImgData() {
        const files = fileInput.files[0];
        if (files) {
            const fileReader = new FileReader();
            fileReader.readAsDataURL(files);
            fileReader.addEventListener("load", function () {
                imgPreview.style.display = "block";
                imgPreview.innerHTML = '<img src="' + this.result + '" />';
            });
        }
    }
</script>
<script src="/scripts/rescale.js"></script> 


<!-- <script src="/scripts/arjs-studio-backend.min.js"></script> 


<script src="scripts/arjs-studio-backend.min.js"></script>-->
<script>
/*
   // Generate BARCODE-MARKER

    let markerId = parseInt("{{markerElement.markerId}}");
    const svg = patternAndImageGenerator(markerId);

   //const testImage = new Image();
   //testImage.src = svg;
   console.log("markerId", markerId);
   console.log("svg",svg);

   // get svg data
//var xml = new XMLSerializer().serializeToString(svg);
//console.log("xml",xml);



const imgPNGbase64 = getDataUrl(svg);
console.log("imgPNGbase64",imgPNGbase64);


    function getDataUrl(img) {
   // Create canvas
   const canvas = document.createElement('canvas');
   const ctx = canvas.getContext('2d');
   ctx.globalCompositeOperation='source-atop';
   
   // Set width and height
   canvas.width = img.naturalWidth;
   canvas.height = img.naturalHeight;
   // Draw the image
   ctx.drawImage(img, 0, 0);

//invert the image

// Render the image



// set the composite operation
ctx.globalCompositeOperation='difference';
ctx.fillStyle = "white";
ctx.globalAlpha = 0;  // alpha 0 = no effect 1 = full effect
ctx.fillRect(0, 0, img.naturalWidth, img.naturalHeight);


   return canvas.toDataURL('image/png');
}
// Select the image

/*const img = document.getElementById('markerImage');

img.addEventListener('load', function (event) {
   const dataUrl = getDataUrl(event.currentTarget);
   console.log("dataURLfromCANVAS",dataUrl);

   // strip off the data: url prefix to get just the base64-encoded bytes
   
    //var data = dataUrl.replace(/^data:image\/\w+;base64,/, "");
    //console.log("data",data);

    //patternAndImageGenerator(dataUrl);

});

*/
  //this is the new Marker
 /* async function patternAndImageGenerator(markerId){  

      
      

    const {MarkerModule, MATRIX_4X4_BCH_1393} = ARjsStudioBackend;  

    
    

    const matrixTypeId = "4x4_bch_13_9_3"
    

    /*const getNewMarkerImage = await MarkerModule.getFullMarkerImage(
        dataUrl,
        1.0,
        944,
        'black'
    );

    const getpattFile = await MarkerModule.getMarkerPattern(dataUrl);*/

    //v2 with barcode-generator
    // generate an SVG data URI for the value of markerId
 /*   const getNewMarkerImage = MarkerModule.getBarcodeMarkerSVGDataURI(matrixTypeId, markerId);

    //convert getNewMarkerImage to a new image    
    console.log("getNewMarkerImage",getNewMarkerImage);
    const patternImage = new Image();
    patternImage.src = getNewMarkerImage;
    patternImage.id="markerSVG";
    // use the image 'load' event to know when image is ready
    patternImage.addEventListener('load', () => {
        console.log("patternImage loaded", patternImage);
        document.body.appendChild(patternImage);
        
       // img.src = patternImage;
       // img.replaceWith(patternImage);
        
    });

    
    
    //v2 patternfile muss nicht erzeugt werden, da ar.js eine barcode dekodierung durchfÃ¼hren kann. 
    //Es wird in dem Fall einfach nur die markerId = value Ã¼bergeben. 
    //Das Markerbild wird zu cloudinary hochgeladen, so muss das Bild nicht jedes mal aufs neue generiert werden;

            const pattFileDownload = document.getElementById('markerSVG');

/*
            pattFileDownload.href = `data:image/png;charset=utf-8,${patternImage}`;
            pattFileDownload.download = 'marker.patt'; 
            
            console.log("pattFileDownload",pattFileDownload);
            // plain text of pattern = 0 0 0 0 0 0 0 255 255 255 0 0 0 0 0 0 
            var str = `data:text/plain;charset=utf-8,${patternImage}`;
            str = `${patternImage}`;
            console.log(str); 
           
            var value = "data:text/plain;charset=UTF-8;base64," + btoa(unescape(encodeURIComponent(str)));
            value = "data:text/plain;charset=UTF-8;base64," + btoa(str);
            //value= btoa(unescape(encodeURIComponent(str)));
            console.log(value);
*/
        /*    
            const pattFileInput = document.getElementById('markerPatternBase64');    
            pattFileInput.setAttribute("pattFileDownload", pattFileDownload);


            console.log(patternImage.src);
            const decoded = decodeURIComponent(patternImage.src).replace("data:image/svg+xml,","");
            var test = window.btoa(decoded);
            console.log(test);

            //var s = new XMLSerializer().serializeToString(document.getElementById("markerSVG"));

            

            // make it base64
            var svg64 = btoa(decoded);
            var b64Start = 'data:image/svg+xml;base64,';
            

            return test;
  }
*/
    
</script>





